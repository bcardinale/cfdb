/*
Title: Directory Traversal
Description: The application allows a directory path to be controlled by user supplied data which may result in the creation or destruction of data in arbitrary file storage locations. 
*/

- LAST UPDATED DATE: December 1st, 2015
- LAST UPDATED BY: Brian Cardinale

## Summary

Directory traversal vulnerabilities occur when an application does not properly validate dynamic data used in creating a directory path within the application. This often is exploited by adding directory traversal characters to a piece of user controllable data. These values can vary depending on hosting environment between forward slashes and back slashes as well as shortcuts such as tilde.

## Capabilities and Risk

Successfully exploiting a directory traversal vulnerability can cause the creation of arbitrary files on the remote system. If these files can be placed inside the web directory container then it may be possible to execute arbitrary code on the remote system via interpretted code suchs as ASP .NET, PHP, Cold Fusion or any other interepted language.

- Read or write files as www-data (or use web server is running as)
- Code execution if file created can be influeced to execute, such as being placed inside the interpreted web host directory.

## Detection

### Black box testing

Review areas of the application that is suspected of performing a file system action such as create, delete, or modify. Attempt to access known default files if the suspicion is the data influences a path that reads data, such as /etc/passwd in Linux. In older versions of Windows you can attempt to read boot.ini, however this is no longer a valid check for new versions of Windows OS. If the suspication is the path that is creating files can be influenced then attempt to affect the storage path by modifying the suspsected values playing a role in the path creation. An interesting response would be if the application is not capable of reading the newly created file because it is in an unexpected location. 

### White box testing

Identify file system API calls for file creation, deletion, and modifying in the language that application is written in. Review the paths used by the calls to determine if the path is influeced by external data. If it is possible attempt the methods explained in black box testing to determine if flaw is actually exploitable.

## Remediation

The impact of this flaw can be reduced by enforcing the concept of least privilege and limit the file system permissions for the account running the application. 

Verify the file system action is taking place in an expected parent directory. Often languages have a method that will canocilize paths to their most simpliest form which will evaulate directroy traversal characters. The canocilized untrusted path can then be checked to see if it is within a known parent path. If it is, then the user has not broken out of their chroot jail.

Limit the characters that are valid from the user in a white list fashion. Identify and accept known good, as oppose to rejecting known bad.

## References

- OWASP Path Traversal (https://www.owasp.org/index.php/Path_Traversal)
- CWE-22 Improper Limitation of a Pathname to a Restricted Directory (https://cwe.mitre.org/data/definitions/22.html)
- Directory Traversal to RCE (http://www.cardinaleconcepts.com/cve-2015-4670-directory-traversal-to-remote-code-execution-in-ajaxcontroltoolkit/)
- CVE-2015-4670 (http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4670)

## Exploitation

### Directory Traversal Influencing Read operation

Attempt to direct the functionality to read critical files that will help gain additional foot hold into the system. Attempt to identify the location of the database configuration file to gain access to the protected system data.

### Directory Traversal Influencing Write operation

Attempt to upload a file into the web server root that will be interpreted by the application server such as a PHP, ASP(X), or Coldfusion. The type of file will be determined by the application environment. 

### Directory Traversal Influencing Write operation

These exploits will be destructive by their nature and could possible cause a denial of service. It may be possible to lift protections by deleting .htaccess files to protected resources. It may also be possible to cause a denial of service by removing critical files.

